%% Clear all the histories
clc;clear;close all;

%% Constant for control
% if QUICK_DEMO == 1(true), load results from mat file instead of computing
% else, compute result again.
QUICK_DEMO = 0;

%% Perform Part 1-B
if QUICK_DEMO == 1
    % load part 1-B result
    load('part_1b_result');
else
    % load camera projection matrixs (P1, P2 <=> 2 images) computed from part 1a
    load('part_1a_result');
    
    % partition P1
    P1_3x3 = P1(:,1:3);
    P1_3x1 = P1(:,4);
    P2_3x3 = P2(:,1:3);
    P2_3x1 = P2(:,4);

    % start performing QR decomposition
    reverse_rows = [0, 0, 1; 0, 1, 0; 1, 0, 0];
    [Q1, R1] = QR((reverse_rows * P1_3x3)');
    [Q2, R2] = QR((reverse_rows * P2_3x3)');

    % compute camera intrinsic matrix, rotation matrix and translation vector
    Intrinsic1 = reverse_rows * R1' * reverse_rows;
    Rotation1 = reverse_rows * Q1';
    Translation1 = inv(Intrinsic1) * P1_3x1;

    Intrinsic2 = reverse_rows * R2' * reverse_rows;
    Rotation2 = reverse_rows * Q2';
    Translation2 = inv(Intrinsic2) * P2_3x1;

    % compose extrinsic matrix
    Extrinsic1 = zeros(4,4);
    Extrinsic1(1:3, 1:3) = Rotation1;
    Extrinsic1(1:3,4) = Translation1;
    Extrinsic1(4,4) = 1;

    Extrinsic2 = zeros(4,4);
    Extrinsic2(1:3, 1:3) = Rotation2;
    Extrinsic2(1:3,4) = Translation2;
    Extrinsic2(4,4) = 1;

    % save results to 'part_1b_result.mat'
    save('part_1b_result', 'Intrinsic1');
    save('part_1b_result', 'Rotation1', '-append');
    save('part_1b_result', 'Translation1', '-append');
    save('part_1b_result', 'Extrinsic1', '-append');

    save('part_1b_result', 'Intrinsic2', '-append');
    save('part_1b_result', 'Rotation2', '-append');
    save('part_1b_result', 'Translation2', '-append');
    save('part_1b_result', 'Extrinsic2', '-append');
end

% show results
sprinIntrinsic1
Rotation1
Translation1
Extrinsic1

Intrinsic2
Rotation2
Translation2
Extrinsic2