%% Clear all the histories
clc;clear;close all;

%% Constant for control
% if QUICK_DEMO == 1(true), load results from mat file instead of computing
% else, compute result again.
QUICK_DEMO = 0;

%% Perform Part 2-C
if QUICK_DEMO == 1
    load('part_2c_result');
else
    % read images and convert them to grayscale
    kobe = rgb2gray(imread('kobeFace.png'));
    gasol = rgb2gray(imread('gasolFace.png'));
    % compare similarity for 2x2 case
    split_num = 2, isUniform = 0;
    [kobe_hv, kobe_nhv] = LBP.image2ConcatedNormalizedHistogramVector(kobe, split_num, isUniform);
    [gasol_hv, gasol_nhv] = LBP.image2ConcatedNormalizedHistogramVector(gasol, split_num, isUniform);
    similarity2x2 = dot(kobe_nhv, gasol_nhv);
    % compare similarity for 3x3 case
    split_num = 3, isUniform = 0;
    [kobe_hv, kobe_nhv] = LBP.image2ConcatedNormalizedHistogramVector(kobe, split_num, isUniform);
    [gasol_hv, gasol_nhv] = LBP.image2ConcatedNormalizedHistogramVector(gasol, split_num, isUniform);
    similarity3x3 = dot(kobe_nhv, gasol_nhv);
    % compare similarity for 4x4 case
    split_num = 4, isUniform = 0;
    [kobe_hv, kobe_nhv] = LBP.image2ConcatedNormalizedHistogramVector(kobe, split_num, isUniform);
    [gasol_hv, gasol_nhv] = LBP.image2ConcatedNormalizedHistogramVector(gasol, split_num, isUniform);
    similarity4x4 = dot(kobe_nhv, gasol_nhv);
    % compare similarity for 9x9 case
    split_num = 9, isUniform = 0;
    [kobe_hv, kobe_nhv] = LBP.image2ConcatedNormalizedHistogramVector(kobe, split_num, isUniform);
    [gasol_hv, gasol_nhv] = LBP.image2ConcatedNormalizedHistogramVector(gasol, split_num, isUniform);
    similarity9x9 = dot(kobe_nhv, gasol_nhv);
    % compare similarity for 20x20 case
    split_num = 20, isUniform = 0;
    [kobe_hv, kobe_nhv] = LBP.image2ConcatedNormalizedHistogramVector(kobe, split_num, isUniform);
    [gasol_hv, gasol_nhv] = LBP.image2ConcatedNormalizedHistogramVector(gasol, split_num, isUniform);
    similarity20x20 = dot(kobe_nhv, gasol_nhv);
    % save results to 'part_2c_result'
    save('part_2c_result', si);
end